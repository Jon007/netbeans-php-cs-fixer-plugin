/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2013 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2013 Sun Microsystems, Inc.
 */
package org.netbeans.modules.php.phpcsfixer.options;

/**
 *
 * @author junichi11
 */
public class PhpCsFixerOptionsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 388435168100294200L;

    /**
     * Creates new form PhpCsFixerOptionsPanel
     */
    public PhpCsFixerOptionsPanel() {
        initComponents();
    }

    public boolean useConfig() {
        return configCheckBox.isSelected();
    }

    public void setConfig(boolean use) {
        configCheckBox.setSelected(use);
    }

    public String getConfig() {
        return (String) configComboBox.getSelectedItem();
    }

    public void setConfig(String config) {
        configComboBox.setSelectedItem(config);
    }

    public boolean useCustom() {
        return customCheckBox.isSelected();
    }

    public void setCustom(boolean use) {
        customCheckBox.setSelected(use);
    }

    public String getCustom() {
        return customTextField.getText();
    }

    public void setCustom(String options) {
        customTextField.setText(options);
    }

    public boolean useFixer() {
        return fixerCheckBox.isSelected();
    }

    public void setFixer(boolean use) {
        fixerCheckBox.setSelected(use);
    }

    public String getFixer() {
        return fixerTextField.getText();
    }

    public void setFixer(String fixerText) {
        fixerTextField.setText(fixerText);
    }

    public boolean useLevel() {
        return levelCheckBox.isSelected();
    }

    public void setLevel(boolean use) {
        levelCheckBox.setSelected(use);
    }

    public String getLevel() {
        return (String) levelComboBox.getSelectedItem();
    }

    public void setLevel(String levelItem) {
        levelComboBox.setSelectedItem(levelItem);
    }

    public boolean isRunOnSave() {
        return runOnSaveCheckBox.isSelected();
    }

    public void setRunOnSave(boolean use) {
        runOnSaveCheckBox.setSelected(use);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        levelCheckBox = new javax.swing.JCheckBox();
        levelComboBox = new javax.swing.JComboBox();
        configCheckBox = new javax.swing.JCheckBox();
        configComboBox = new javax.swing.JComboBox();
        fixerCheckBox = new javax.swing.JCheckBox();
        fixerTextField = new javax.swing.JTextField();
        customCheckBox = new javax.swing.JCheckBox();
        customTextField = new javax.swing.JTextField();
        runOnSaveCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(levelCheckBox, org.openide.util.NbBundle.getMessage(PhpCsFixerOptionsPanel.class, "PhpCsFixerOptionsPanel.levelCheckBox.text")); // NOI18N

        levelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "psr0", "psr1", "psr2", "all" }));

        org.openide.awt.Mnemonics.setLocalizedText(configCheckBox, org.openide.util.NbBundle.getMessage(PhpCsFixerOptionsPanel.class, "PhpCsFixerOptionsPanel.configCheckBox.text")); // NOI18N

        configComboBox.setEditable(true);
        configComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "default", "magento", "sf20", "sf21" }));

        org.openide.awt.Mnemonics.setLocalizedText(fixerCheckBox, org.openide.util.NbBundle.getMessage(PhpCsFixerOptionsPanel.class, "PhpCsFixerOptionsPanel.fixerCheckBox.text")); // NOI18N

        fixerTextField.setText(org.openide.util.NbBundle.getMessage(PhpCsFixerOptionsPanel.class, "PhpCsFixerOptionsPanel.fixerTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(customCheckBox, org.openide.util.NbBundle.getMessage(PhpCsFixerOptionsPanel.class, "PhpCsFixerOptionsPanel.customCheckBox.text")); // NOI18N

        customTextField.setText(org.openide.util.NbBundle.getMessage(PhpCsFixerOptionsPanel.class, "PhpCsFixerOptionsPanel.customTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(runOnSaveCheckBox, org.openide.util.NbBundle.getMessage(PhpCsFixerOptionsPanel.class, "PhpCsFixerOptionsPanel.runOnSaveCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fixerCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(fixerTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(customCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(customTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(levelCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(levelComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(configCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(configComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(runOnSaveCheckBox))
                        .addGap(0, 239, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(levelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(levelCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configCheckBox)
                    .addComponent(configComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fixerCheckBox)
                    .addComponent(fixerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customCheckBox)
                    .addComponent(customTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnSaveCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox configCheckBox;
    private javax.swing.JComboBox configComboBox;
    private javax.swing.JCheckBox customCheckBox;
    private javax.swing.JTextField customTextField;
    private javax.swing.JCheckBox fixerCheckBox;
    private javax.swing.JTextField fixerTextField;
    private javax.swing.JCheckBox levelCheckBox;
    private javax.swing.JComboBox levelComboBox;
    private javax.swing.JCheckBox runOnSaveCheckBox;
    // End of variables declaration//GEN-END:variables
}
